// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#include "trade.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace marketfeed
{
  class TradeDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trade> _instance;
  } _Trade_default_instance_;
  class VoidMessageDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoidMessage> _instance;
  } _VoidMessage_default_instance_;
  class FilterRequestDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterRequest> _instance;
  } _FilterRequest_default_instance_;
} // namespace marketfeed
static void InitDefaultsscc_info_FilterRequest_trade_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::marketfeed::_FilterRequest_default_instance_;
    new (ptr)::marketfeed::FilterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::marketfeed::FilterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterRequest_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterRequest_trade_2eproto}, {}};

static void InitDefaultsscc_info_Trade_trade_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::marketfeed::_Trade_default_instance_;
    new (ptr)::marketfeed::Trade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::marketfeed::Trade::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trade_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trade_trade_2eproto}, {}};

static void InitDefaultsscc_info_VoidMessage_trade_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::marketfeed::_VoidMessage_default_instance_;
    new (ptr)::marketfeed::VoidMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::marketfeed::VoidMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoidMessage_trade_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoidMessage_trade_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trade_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_trade_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_trade_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trade_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::marketfeed::Trade, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::marketfeed::Trade, ticker_),
    PROTOBUF_FIELD_OFFSET(::marketfeed::Trade, timestamp_),
    PROTOBUF_FIELD_OFFSET(::marketfeed::Trade, price_),
    PROTOBUF_FIELD_OFFSET(::marketfeed::Trade, transaction_),
    PROTOBUF_FIELD_OFFSET(::marketfeed::Trade, open_),
    PROTOBUF_FIELD_OFFSET(::marketfeed::Trade, direction_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::marketfeed::VoidMessage, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::marketfeed::FilterRequest, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::marketfeed::FilterRequest, delay_),
    PROTOBUF_FIELD_OFFSET(::marketfeed::FilterRequest, tickers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::marketfeed::Trade)},
    {11, -1, sizeof(::marketfeed::VoidMessage)},
    {16, -1, sizeof(::marketfeed::FilterRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::marketfeed::_Trade_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::marketfeed::_VoidMessage_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::marketfeed::_FilterRequest_default_instance_),
};

const char descriptor_table_protodef_trade_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\013trade.proto\022\nmarketfeed\"o\n\005Trade\022\016\n\006ti"
    "cker\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022\r\n\005price\030\003"
    " \001(\001\022\023\n\013transaction\030\004 \001(\003\022\014\n\004open\030\005 \001(\001\022"
    "\021\n\tdirection\030\006 \001(\021\"\r\n\013VoidMessage\"/\n\rFil"
    "terRequest\022\r\n\005delay\030\001 \001(\003\022\017\n\007tickers\030\002 \003"
    "(\t2Q\n\014TickerSource\022A\n\017ConnectFirehose\022\027."
    "marketfeed.VoidMessage\032\021.marketfeed.Trad"
    "e\"\0000\0012]\n\027ApplicationTickerSource\022B\n\016Filt"
    "eredStream\022\031.marketfeed.FilterRequest\032\021."
    "marketfeed.Trade\"\0000\001b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_trade_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_trade_2eproto_sccs[3] = {
    &scc_info_FilterRequest_trade_2eproto.base,
    &scc_info_Trade_trade_2eproto.base,
    &scc_info_VoidMessage_trade_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trade_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto = {
    false,
    false,
    descriptor_table_protodef_trade_2eproto,
    "trade.proto",
    388,
    &descriptor_table_trade_2eproto_once,
    descriptor_table_trade_2eproto_sccs,
    descriptor_table_trade_2eproto_deps,
    3,
    0,
    schemas,
    file_default_instances,
    TableStruct_trade_2eproto::offsets,
    file_level_metadata_trade_2eproto,
    3,
    file_level_enum_descriptors_trade_2eproto,
    file_level_service_descriptors_trade_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trade_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trade_2eproto)), true);
namespace marketfeed
{

  // ===================================================================

  void Trade::InitAsDefaultInstance()
  {
  }
  class Trade::_Internal
  {
  public:
  };

  Trade::Trade(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:marketfeed.Trade)
  }
  Trade::Trade(const Trade &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ticker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_ticker().empty())
    {
      ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ticker(),
                  GetArena());
    }
    ::memcpy(&timestamp_, &from.timestamp_,
             static_cast<size_t>(reinterpret_cast<char *>(&direction_) -
                                 reinterpret_cast<char *>(&timestamp_)) +
                 sizeof(direction_));
    // @@protoc_insertion_point(copy_constructor:marketfeed.Trade)
  }

  void Trade::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trade_trade_2eproto.base);
    ticker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&timestamp_, 0, static_cast<size_t>(reinterpret_cast<char *>(&direction_) - reinterpret_cast<char *>(&timestamp_)) + sizeof(direction_));
  }

  Trade::~Trade()
  {
    // @@protoc_insertion_point(destructor:marketfeed.Trade)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void Trade::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    ticker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void Trade::ArenaDtor(void *object)
  {
    Trade *_this = reinterpret_cast<Trade *>(object);
    (void)_this;
  }
  void Trade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void Trade::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const Trade &Trade::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trade_trade_2eproto.base);
    return *internal_default_instance();
  }

  void Trade::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:marketfeed.Trade)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ticker_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&timestamp_, 0, static_cast<size_t>(reinterpret_cast<char *>(&direction_) - reinterpret_cast<char *>(&timestamp_)) + sizeof(direction_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *Trade::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // string ticker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
        {
          auto str = _internal_mutable_ticker();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "marketfeed.Trade.ticker"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
        {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // double price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25))
        {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        }
        else
          goto handle_unusual;
        continue;
      // int64 transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32))
        {
          transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // double open = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41))
        {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        }
        else
          goto handle_unusual;
        continue;
      // sint32 direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48))
        {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *Trade::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:marketfeed.Trade)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string ticker = 1;
    if (this->ticker().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_ticker().data(), static_cast<int>(this->_internal_ticker().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "marketfeed.Trade.ticker");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_ticker(), target);
    }

    // int64 timestamp = 2;
    if (this->timestamp() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
    }

    // double price = 3;
    if (!(this->price() <= 0 && this->price() >= 0))
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_price(), target);
    }

    // int64 transaction = 4;
    if (this->transaction() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_transaction(), target);
    }

    // double open = 5;
    if (!(this->open() <= 0 && this->open() >= 0))
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_open(), target);
    }

    // sint32 direction = 6;
    if (this->direction() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_direction(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:marketfeed.Trade)
    return target;
  }

  size_t Trade::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:marketfeed.Trade)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string ticker = 1;
    if (this->ticker().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_ticker());
    }

    // int64 timestamp = 2;
    if (this->timestamp() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                        this->_internal_timestamp());
    }

    // double price = 3;
    if (!(this->price() <= 0 && this->price() >= 0))
    {
      total_size += 1 + 8;
    }

    // int64 transaction = 4;
    if (this->transaction() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                        this->_internal_transaction());
    }

    // double open = 5;
    if (!(this->open() <= 0 && this->open() >= 0))
    {
      total_size += 1 + 8;
    }

    // sint32 direction = 6;
    if (this->direction() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
                        this->_internal_direction());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:marketfeed.Trade)
    GOOGLE_DCHECK_NE(&from, this);
    const Trade *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trade>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:marketfeed.Trade)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:marketfeed.Trade)
      MergeFrom(*source);
    }
  }

  void Trade::MergeFrom(const Trade &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:marketfeed.Trade)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.ticker().size() > 0)
    {
      _internal_set_ticker(from._internal_ticker());
    }
    if (from.timestamp() != 0)
    {
      _internal_set_timestamp(from._internal_timestamp());
    }
    if (!(from.price() <= 0 && from.price() >= 0))
    {
      _internal_set_price(from._internal_price());
    }
    if (from.transaction() != 0)
    {
      _internal_set_transaction(from._internal_transaction());
    }
    if (!(from.open() <= 0 && from.open() >= 0))
    {
      _internal_set_open(from._internal_open());
    }
    if (from.direction() != 0)
    {
      _internal_set_direction(from._internal_direction());
    }
  }

  void Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:marketfeed.Trade)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void Trade::CopyFrom(const Trade &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:marketfeed.Trade)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool Trade::IsInitialized() const
  {
    return true;
  }

  void Trade::InternalSwap(Trade *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ticker_.Swap(&other->ticker_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(Trade, direction_) + sizeof(Trade::direction_) - PROTOBUF_FIELD_OFFSET(Trade, timestamp_)>(
        reinterpret_cast<char *>(&timestamp_),
        reinterpret_cast<char *>(&other->timestamp_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata Trade::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void VoidMessage::InitAsDefaultInstance()
  {
  }
  class VoidMessage::_Internal
  {
  public:
  };

  VoidMessage::VoidMessage(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:marketfeed.VoidMessage)
  }
  VoidMessage::VoidMessage(const VoidMessage &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:marketfeed.VoidMessage)
  }

  void VoidMessage::SharedCtor()
  {
  }

  VoidMessage::~VoidMessage()
  {
    // @@protoc_insertion_point(destructor:marketfeed.VoidMessage)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void VoidMessage::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void VoidMessage::ArenaDtor(void *object)
  {
    VoidMessage *_this = reinterpret_cast<VoidMessage *>(object);
    (void)_this;
  }
  void VoidMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void VoidMessage::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const VoidMessage &VoidMessage::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoidMessage_trade_2eproto.base);
    return *internal_default_instance();
  }

  void VoidMessage::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:marketfeed.VoidMessage)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *VoidMessage::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      if ((tag & 7) == 4 || tag == 0)
      {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *VoidMessage::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:marketfeed.VoidMessage)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:marketfeed.VoidMessage)
    return target;
  }

  size_t VoidMessage::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:marketfeed.VoidMessage)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void VoidMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:marketfeed.VoidMessage)
    GOOGLE_DCHECK_NE(&from, this);
    const VoidMessage *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoidMessage>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:marketfeed.VoidMessage)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:marketfeed.VoidMessage)
      MergeFrom(*source);
    }
  }

  void VoidMessage::MergeFrom(const VoidMessage &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:marketfeed.VoidMessage)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;
  }

  void VoidMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:marketfeed.VoidMessage)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void VoidMessage::CopyFrom(const VoidMessage &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:marketfeed.VoidMessage)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool VoidMessage::IsInitialized() const
  {
    return true;
  }

  void VoidMessage::InternalSwap(VoidMessage *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata VoidMessage::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void FilterRequest::InitAsDefaultInstance()
  {
  }
  class FilterRequest::_Internal
  {
  public:
  };

  FilterRequest::FilterRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena),
        tickers_(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:marketfeed.FilterRequest)
  }
  FilterRequest::FilterRequest(const FilterRequest &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        tickers_(from.tickers_)
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    delay_ = from.delay_;
    // @@protoc_insertion_point(copy_constructor:marketfeed.FilterRequest)
  }

  void FilterRequest::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterRequest_trade_2eproto.base);
    delay_ = PROTOBUF_LONGLONG(0);
  }

  FilterRequest::~FilterRequest()
  {
    // @@protoc_insertion_point(destructor:marketfeed.FilterRequest)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void FilterRequest::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void FilterRequest::ArenaDtor(void *object)
  {
    FilterRequest *_this = reinterpret_cast<FilterRequest *>(object);
    (void)_this;
  }
  void FilterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void FilterRequest::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const FilterRequest &FilterRequest::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterRequest_trade_2eproto.base);
    return *internal_default_instance();
  }

  void FilterRequest::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:marketfeed.FilterRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    tickers_.Clear();
    delay_ = PROTOBUF_LONGLONG(0);
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *FilterRequest::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // int64 delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // repeated string tickers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          ptr -= 1;
          do
          {
            ptr += 1;
            auto str = _internal_add_tickers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "marketfeed.FilterRequest.tickers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    }   // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *FilterRequest::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:marketfeed.FilterRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 delay = 1;
    if (this->delay() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_delay(), target);
    }

    // repeated string tickers = 2;
    for (int i = 0, n = this->_internal_tickers_size(); i < n; i++)
    {
      const auto &s = this->_internal_tickers(i);
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          s.data(), static_cast<int>(s.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "marketfeed.FilterRequest.tickers");
      target = stream->WriteString(2, s, target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:marketfeed.FilterRequest)
    return target;
  }

  size_t FilterRequest::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:marketfeed.FilterRequest)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated string tickers = 2;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tickers_.size());
    for (int i = 0, n = tickers_.size(); i < n; i++)
    {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          tickers_.Get(i));
    }

    // int64 delay = 1;
    if (this->delay() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                        this->_internal_delay());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void FilterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:marketfeed.FilterRequest)
    GOOGLE_DCHECK_NE(&from, this);
    const FilterRequest *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterRequest>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:marketfeed.FilterRequest)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:marketfeed.FilterRequest)
      MergeFrom(*source);
    }
  }

  void FilterRequest::MergeFrom(const FilterRequest &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:marketfeed.FilterRequest)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    tickers_.MergeFrom(from.tickers_);
    if (from.delay() != 0)
    {
      _internal_set_delay(from._internal_delay());
    }
  }

  void FilterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:marketfeed.FilterRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void FilterRequest::CopyFrom(const FilterRequest &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:marketfeed.FilterRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool FilterRequest::IsInitialized() const
  {
    return true;
  }

  void FilterRequest::InternalSwap(FilterRequest *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    tickers_.InternalSwap(&other->tickers_);
    swap(delay_, other->delay_);
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata FilterRequest::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // @@protoc_insertion_point(namespace_scope)
} // namespace marketfeed
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::marketfeed::Trade *Arena::CreateMaybeMessage<::marketfeed::Trade>(Arena *arena)
{
  return Arena::CreateMessageInternal<::marketfeed::Trade>(arena);
}
template <>
PROTOBUF_NOINLINE ::marketfeed::VoidMessage *Arena::CreateMaybeMessage<::marketfeed::VoidMessage>(Arena *arena)
{
  return Arena::CreateMessageInternal<::marketfeed::VoidMessage>(arena);
}
template <>
PROTOBUF_NOINLINE ::marketfeed::FilterRequest *Arena::CreateMaybeMessage<::marketfeed::FilterRequest>(Arena *arena)
{
  return Arena::CreateMessageInternal<::marketfeed::FilterRequest>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
